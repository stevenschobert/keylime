!function(e,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?module.exports=t():e.keylime=t()}(this,function(){"use strict";function keylime(e){return"string"==typeof e&&(e=createNamedConstructor(e)),convertConstructorToKeylime(e)}function KeylimeConstructor(e){this.descriptor=new KeylimeDescriptor(e),this.prototype=this.prototype||{},Object.defineProperty(this.prototype,"keylime",{value:this.descriptor})}function KeylimeDescriptor(e){this.attributes=null!==e&&"object"==typeof e?e:{}}function createNamedConstructor(name,runKeylime){return assert("string"==typeof name,"A 'name' string is required to create a named constructor."),eval(["function ",name,"(attrs) {",runKeylime===!1?"":"if (this.keylime) { this.keylime.init(this, attrs); }","}; ",name].join(""))}function convertConstructorToKeylime(e,t){return assert("function"==typeof e,"A function parameter is required to convert to a KeylimeConstructor"),e.__proto__=KeylimeConstructor.prototype,e.descriptor=new KeylimeDescriptor(t),Object.defineProperty(e.prototype,"keylime",{value:e.descriptor}),e}function setAttributesUsingMapAndValues(e,t,r){var o,n,i;assert("object"==typeof e,"A 'target' object is required to set attribute values.");for(var s in t)if(t.hasOwnProperty(s)){if(o=t[s],r&&void 0!==r[o.name])n=r[o.name];else switch(o.copyMode){case"shallow":n=clone(o.defaultValue);break;case"deep":n=clone(o.defaultValue,!0);break;default:n=o.defaultValue}"function"==typeof n&&(n=n()),"function"==typeof o.handler?(i=o.handler(n,e),void 0!==i&&(e[o.name]=i)):e[o.name]=n}return e}function setAttributesForInstance(e,t,r){var o=null;return r instanceof KeylimeConstructor?o=r.getAttrs():void 0!==e.keylime&&(o=e.keylime.attributes),assert(null!==o&&"object"==typeof o,"You must supply an instance of a Keylime constructor, or the constructor itself to set attributes."),setAttributesUsingMapAndValues(e,o,t)}function extend(){var e=[].slice.call(arguments);e[0]="object"==typeof e[0]?e[0]:{};for(var t=1;t<e.length;t++)if("object"==typeof e[t])for(var r in e[t])e[t].hasOwnProperty(r)&&(e[0][r]=e[t][r]);return e[0]}function clone(e,t){var r,o=Object.prototype.toString.call(e),n="[object Boolean]",i="[object Number]",s="[object String]",u="[object Object]",a="[object Array]",c="[object Date]",l="[object RegExp]";if("object"!=typeof e)return e;switch(o){case l:r=new e.constructor(e.source,/\w*$/.exec(e)),r.lastIndex=e.lastIndex;break;case n:case c:r=new e.constructor(+e);break;case i:case s:r=new e.constructor(e);break;case a:r=new e.constructor;for(var p=0;p<e.length;p++)r.push(t?clone(e[p],t):e[p]);break;case u:r=new e.constructor;for(var y in e)e.hasOwnProperty(y)&&(r[y]=t?clone(e[y],t):e[y]);break;default:r=e}return r}function registerHelper(e,t){return assert("string"==typeof e,"You must supply a 'name' parameter to register a new Keylime helper."),assert("function"==typeof t,"You must supply a 'function' parameter to register a new Keylime helper."),assert(void 0===KeylimeConstructor.prototype[e],"Cannot register a plugin using the name '"+e+"', it already exists!"),KeylimeConstructor.prototype[e]=function(){var e=[].slice.call(arguments);return e.unshift(this),t.apply(t,e),this},!0}function unregisterHelper(e){return assert("string"==typeof e,"You must supply a 'name' parameter to un-register a Keylime helper."),KeylimeConstructor.prototype[e]?(KeylimeConstructor.prototype[e]=void 0,!0):!1}function KeylimeError(e){this.message=e}function assert(e,t){if(!e)throw new KeylimeError(t)}return KeylimeConstructor.prototype.__proto__=Function.prototype,KeylimeConstructor.prototype.attr=function(e,t,r){return this.descriptor.setAttr(e,t,extend({copyMode:"deep"},r)),this},KeylimeConstructor.prototype.getAttrs=function(){return this.descriptor.attributes},KeylimeConstructor.prototype.method=function(e,t){return assert("string"==typeof e,"You must supply a 'name' to add a method to a constructor."),assert("function"==typeof t,"You must supply a 'function' to add a method to a constructor."),this.prototype[e]=t,this},KeylimeConstructor.prototype.include=function(e){var t=[].slice.call(arguments);return assert("function"==typeof e,"You must supply a 'function' to add include a mixin on a constructor."),t[0]=this,e.apply(e,t),this},KeylimeDescriptor.prototype.init=function(e,t){return setAttributesUsingMapAndValues(e,this.attributes,t),e},KeylimeDescriptor.prototype.setAttr=function(e,t,r){return assert("string"==typeof e,"A 'name' string is required to create an attribute."),this.attributes[e]={name:e,defaultValue:t},extend(this.attributes[e],r),this},KeylimeDescriptor.prototype.getAttr=function(e){return assert("string"==typeof e,"A 'name' string is required to get an attribute."),this.attributes[e]},KeylimeDescriptor.prototype.getDefaultValueFor=function(e){var t;return assert("string"==typeof e,"A 'name' string is required to get an attribute defaultValue."),this.attributes[e]&&(t=this.attributes[e].defaultValue),t},KeylimeError.prototype.__proto__=Error.prototype,keylime.version="1.0.0",keylime.registerHelper=registerHelper,keylime.unregisterHelper=unregisterHelper,keylime.util={clone:clone,extend:extend},keylime.core={createNamedConstructor:createNamedConstructor,convertConstructorToKeylime:convertConstructorToKeylime,setAttributesUsingMapAndValues:setAttributesUsingMapAndValues,setAttributesForInstance:setAttributesForInstance},keylime.prototypes={KeylimeConstructor:KeylimeConstructor,KeylimeDescriptor:KeylimeDescriptor,KeylimeError:KeylimeError},keylime});